// Generated by gencpp from file Lab2/CounterResult.msg
// DO NOT EDIT!


#ifndef LAB2_MESSAGE_COUNTERRESULT_H
#define LAB2_MESSAGE_COUNTERRESULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace Lab2
{
template <class ContainerAllocator>
struct CounterResult_
{
  typedef CounterResult_<ContainerAllocator> Type;

  CounterResult_()
    : Limit_Reached(0)  {
    }
  CounterResult_(const ContainerAllocator& _alloc)
    : Limit_Reached(0)  {
  (void)_alloc;
    }



   typedef int64_t _Limit_Reached_type;
  _Limit_Reached_type Limit_Reached;





  typedef boost::shared_ptr< ::Lab2::CounterResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Lab2::CounterResult_<ContainerAllocator> const> ConstPtr;

}; // struct CounterResult_

typedef ::Lab2::CounterResult_<std::allocator<void> > CounterResult;

typedef boost::shared_ptr< ::Lab2::CounterResult > CounterResultPtr;
typedef boost::shared_ptr< ::Lab2::CounterResult const> CounterResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::Lab2::CounterResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::Lab2::CounterResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::Lab2::CounterResult_<ContainerAllocator1> & lhs, const ::Lab2::CounterResult_<ContainerAllocator2> & rhs)
{
  return lhs.Limit_Reached == rhs.Limit_Reached;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::Lab2::CounterResult_<ContainerAllocator1> & lhs, const ::Lab2::CounterResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace Lab2

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::Lab2::CounterResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::Lab2::CounterResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::Lab2::CounterResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::Lab2::CounterResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::Lab2::CounterResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::Lab2::CounterResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::Lab2::CounterResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b5f0aff541c8b82c0617bf0b4d5d2ab2";
  }

  static const char* value(const ::Lab2::CounterResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb5f0aff541c8b82cULL;
  static const uint64_t static_value2 = 0x0617bf0b4d5d2ab2ULL;
};

template<class ContainerAllocator>
struct DataType< ::Lab2::CounterResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Lab2/CounterResult";
  }

  static const char* value(const ::Lab2::CounterResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::Lab2::CounterResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"int64 Limit_Reached\n"
;
  }

  static const char* value(const ::Lab2::CounterResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::Lab2::CounterResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Limit_Reached);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CounterResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::Lab2::CounterResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::Lab2::CounterResult_<ContainerAllocator>& v)
  {
    s << indent << "Limit_Reached: ";
    Printer<int64_t>::stream(s, indent + "  ", v.Limit_Reached);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LAB2_MESSAGE_COUNTERRESULT_H
